base {
    archivesName = "${mod_id}-neoforge"
}

loom {
    neoForge {
        accessTransformer {file('src/main/resources/META-INF/accesstransformer.cfg')}
    }

//    mixin {
//        defaultRefmapName.set("${mod_id}.refmap.json")
//    }

    runs {
        client {
            client()
            setConfigName("NeoForge Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("NeoForge Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    neoForge "net.neoforged:neoforge:${forge_version}"
    mappings "net.fabricmc:yarn:${yarn_version}:v2"

    compileOnly project(":common")

    modCompileOnly("dev.isxander.yacl:yet-another-config-lib-neoforge:${project.yacl_forge_version}")

//    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}"))
//    implementation(include("io.github.llamalad7:mixinextras-forge:${project.mixin_extras_version}"))
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

// Prevent forge from shouting at me for not having javadocs everywhere
javadoc.enabled = false

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    repositories {
        maven {
            name = "enjaraiMaven"
            url = "https://maven.enjarai.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.property('group')
            artifactId = "do-a-barrel-roll"
            version = "${project.version}-neoforge"

            from components.java
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    displayName = "${property('mod_version')} for NeoForge ${property('minecraft_version')}"
    version = "${project.version}-neoforge"
    changelog = getRootProject().file("CHANGELOG.md").text
    type = STABLE
    modLoaders.add("neoforge")

    def min = property('publish_target_min')
    def max = property('publish_target_max')

    if (providers.gradleProperty('enjaraiModrinthToken').present) {
        modrinth {
            projectId = property('mod_modrinth')
            accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

            if (min == max) {
                minecraftVersions.add(min)
            } else {
                minecraftVersionRange {
                    start = min
                    end = max
                }
            }
        }
    }

    if (providers.gradleProperty('enjaraiCurseforgeToken').present) {
        curseforge {
            projectId = property('mod_curseforge')
            accessToken = providers.gradleProperty('enjaraiCurseforgeToken').get()

            if (min == max) {
                minecraftVersions.add(min)
            } else {
                minecraftVersionRange {
                    start = min
                    end = max
                }
            }
        }
    }

    if (providers.gradleProperty('enjaraiGithubToken').present) {
        github {
            repository = property('mod_github')
            accessToken = providers.gradleProperty('enjaraiGithubToken').get()

            commitish = property('git_branch')
            tagName = "${project.version}-neoforge"
        }
    }
}
